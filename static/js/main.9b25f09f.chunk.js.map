{"version":3,"sources":["logo.svg","components/ColorMapDisplay.jsx","components/ColorMapSlider.jsx","components/ColorMapAnchorList.jsx","components/ColorMapColorPicker.jsx","components/ColorMapEditor.jsx","scripts/APIHelper.js","components/HomePage.jsx","components/ViewPage.jsx","components/NavBar.jsx","App.js","reportWebVitals.js","index.js"],"names":["rgbHex","require","ColorMapDisplay","props","state","addAnchorPoint","bind","e","divBound","target","getBoundingClientRect","divWidth","right","left","xRatio","clientX","Math","min","max","round","this","gradientCSS","anchorColors","map","color","idx","anchorPoints","join","className","style","background","onClick","Component","ColorMapSlider","count","length","allowCross","step","value","handleStyle","backgroundColor","rgb","onSliderChange","recentUpdateTime","ColorMapAnchorList","val","selectHandler","removeHandler","ColorMapAnchorListItem","ColorMapColorPicker","currentFocusedColor","focusedIdx","onChangeComplete","onColorChange","disableAlpha","width","INIT_COLOR_1","INIT_COLOR_2","ColorMapEditor","Date","now","currentFocusedPoint","viewMode","onFocusedPointChange","onRemoveAnchorPoint","setState","location","insertColor","currentAnchorPoints","currentAnchorColors","insertIdx","i","insertedAnchorPoints","splice","insertedColors","onAnchorPointDidChange","values","newFocusIndex","removeIndex","nextFocusedPoint","nextAnchorPoints","nextAnchorColors","JSON","parse","stringify","newColor","newColorRGB","newAnchorColors","r","g","b","API_END_POINT","HomePage","colorMapName","waitingOnAPI","onTextAreaChange","onCreateButtonClick","event","textAreaString","requestMapName","RegExp","test","name","anchors","currentAnchor","red","green","blue","anchor","push","requestBody","axios","post","headers","POSTcolormap","then","res","history","pathname","justCreated","catch","err","errMessage","undefined","response","data","toast","error","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","warn","initAnchorPoints","initAnchorColors","fontSize","rows","maxlength","placeholder","onChange","Spinner","animation","variant","Button","disabled","ViewPage","loaded","edited","split","get","success","console","log","to","NavBar","App","basename","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9b25f09f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React, { Component } from 'react';\n\nimport '../styles/ColorMapDisplay.css';\n\nconst rgbHex = require('rgb-hex');\nconst SLIDER_MAX = 1;\nconst SLIDER_MIN = 0;\nconst ROUNDING_FACTOR = 1000;\n\nclass ColorMapDisplay extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {}\n        this.addAnchorPoint = this.addAnchorPoint.bind(this);\n    }\n\n    addAnchorPoint(e) {\n        let divBound = e.target.getBoundingClientRect();\n        let divWidth = divBound.right - divBound.left;\n        let clickedXPosition = e.clientX - divBound.left;\n        let xRatio = clickedXPosition / divWidth;\n        // Solve some precision errors, also round to nearest thousand\n        xRatio = Math.min(Math.max(xRatio, SLIDER_MIN), SLIDER_MAX);\n        xRatio = Math.round(xRatio * ROUNDING_FACTOR) / ROUNDING_FACTOR;\n        this.props.addAnchorPoint(xRatio * 100);\n    }\n\n    render() {\n        let gradientCSS = \"linear-gradient(90deg,\" + this.props.anchorColors.map((color, idx) => {\n            const hexColor = rgbHex(...color);\n            return ' #' + hexColor + ' ' + this.props.anchorPoints[idx] + '%';\n        }).join(',') + ')';\n        return (\n            <div\n                className=\"ColorMapDisplayDiv\"\n                style={{ background: gradientCSS }}\n                onClick={this.addAnchorPoint}\n            />\n        );\n    }\n\n}\n\nexport default ColorMapDisplay;","import React, {Component} from 'react';\nimport '../styles/ColorMapSlider.css';\nimport Slider, { Range, Handle } from 'rc-slider';\nimport 'rc-slider/assets/index.css';\n\nclass ColorMapSlider extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div className=\"ColorMapSliderDiv\">\n                <Range \n                    key={this.props.recentUpdateTime}\n                    count={this.props.anchorPoints.length - 1}\n                    allowCross={false}\n                    step={0.1}\n                    value = {this.props.anchorPoints}\n                    handleStyle={[{ backgroundColor: \"#fff000\" }, { backgroundColor: \"#ff00ff\" }]}\n                    handleStyle={\n                        this.props.anchorColors.map(rgb => {\n                                return {backgroundColor: `rgba(${rgb[0]}, ${rgb[1]}, ${rgb[2]})`}\n                    })}\n                    onChange = {this.props.onSliderChange}\n                />\n            </div>\n        );\n    }\n\n}\n\nexport default ColorMapSlider;","import React, { Component } from 'react';\n\nimport '../styles/ColorMapAnchorList.css';\n\nconst ColorMapAnchorListItem = (val, idx, color, selectHandler, removeHandler) => {\n    return (\n        <div className=\"ColorMapAnchorListItem\" key={idx}>\n            <div className=\"ColorMapAnchorListName disable-select\"\n                onClick={() => { selectHandler(idx) }}>\n                <div\n                    className=\"ColorMapAnchorListColor\"\n                    style={{ backgroundColor: \"rgba(\" + color.join(', ') + ')' }}\n                />\n                {val}\n            </div>\n            <div className=\"ColorMapAnchorListRemoveButtonDiv disable-select\"\n                onClick={() => { removeHandler(idx) }}>\n                &#10005;\n                </div>\n        </div>\n    );\n}\n\nclass ColorMapAnchorList extends Component {\n    render() {\n        return (\n            <div className=\"ColorMapAnchorListDiv\">\n                {this.props.anchorPoints.map((val, idx) =>\n                    ColorMapAnchorListItem(\n                        val,\n                        idx,\n                        this.props.anchorColors[idx],\n                        this.props.selectHandler,\n                        this.props.removeHandler))}\n            </div>\n        );\n    }\n\n}\n\nexport default ColorMapAnchorList;","import React, {Component} from 'react';\nimport '../styles/ColorMapColorPicker.css';\nimport ColorMapAnchorList from './ColorMapAnchorList';\nimport { ChromePicker } from 'react-color'\n\nconst rgbHex = require('rgb-hex');\nconst DISABLE_ALPHA = true;\nconst COLOR_PICKER_WIDTH = 500;\n\nclass ColorMapColorPicker extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const currentFocusedColor = this.props.anchorColors[this.props.focusedIdx];\n        return (\n            <div className=\"ColorMapColorPickerOuterDiv\">\n                <div className=\"ColorMapColorPickerDiv\">\n                    <ChromePicker \n                    color={rgbHex(...currentFocusedColor)}\n                    onChangeComplete={this.props.onColorChange}\n                    disableAlpha={DISABLE_ALPHA}\n                    width={COLOR_PICKER_WIDTH}\n                    // styles={{\"picker\": {\"borderRadius\": '50px'}}}\n                    />\n                    <ColorMapAnchorList \n                        anchorPoints={this.props.anchorPoints}\n                        anchorColors={this.props.anchorColors}\n                        selectHandler={this.props.selectHandler} \n                        removeHandler={this.props.removeHandler}\n                    />\n                </div>\n            </div>\n        );\n    }\n\n}\n\nexport default ColorMapColorPicker;","import React, {Component} from 'react';\nimport '../styles/ColorMapEditor.css';\nimport ColorMapDisplay from './ColorMapDisplay';\nimport ColorMapSlider from './ColorMapSlider';\nimport ColorMapColorPicker from './ColorMapColorPicker';\n\nconst INIT_COLOR_1 = [213, 51, 105];\nconst INIT_COLOR_2 = [218, 174, 81];\n\nclass ColorMapEditor extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            anchorPoints: [0, 100],\n            anchorColors: [INIT_COLOR_1, INIT_COLOR_2],\n            recentUpdateTime: Date.now(),\n            currentFocusedPoint: 0,\n            viewMode: false\n        }\n        this.addAnchorPoint = this.addAnchorPoint.bind(this);\n        this.onSliderChange = this.onSliderChange.bind(this);\n        this.onFocusedPointChange = this.onFocusedPointChange.bind(this);\n        this.onColorChange = this.onColorChange.bind(this);\n        this.onRemoveAnchorPoint = this.onRemoveAnchorPoint.bind(this);\n    }\n\n    componentDidMount() {\n        if (\"anchorPoints\" in this.props) {\n            this.setState({\n                anchorColors: this.props.anchorColors,\n                anchorPoints: this.props.anchorPoints,\n                viewMode: true\n            })\n        }\n    }\n\n    addAnchorPoint(location) {\n        location = Math.round(location * 10) / 10;\n        const currentAnchorPoints = [-1, ...this.state.anchorPoints, 101];\n        const currentAnchorColors = [this.state.anchorColors[0], ...this.state.anchorColors, this.state.anchorColors[this.state.anchorColors.length-1]];\n        let insertIdx = 0;\n        let insertColor;\n        for (let i = 0; i < currentAnchorPoints.length - 1; i++) {\n            insertIdx = i;\n            if (location >= currentAnchorPoints[i] && location <= currentAnchorPoints[i + 1]) {\n                insertColor = [\n                    Math.round((currentAnchorColors[i][0] + currentAnchorColors[i+1][0]) / 2),\n                    Math.round((currentAnchorColors[i][1] + currentAnchorColors[i+1][1]) / 2),\n                    Math.round((currentAnchorColors[i][2] + currentAnchorColors[i+1][2]) / 2),\n                ];\n                break;\n            }\n        }\n        const insertedAnchorPoints = [...this.state.anchorPoints];\n        insertedAnchorPoints.splice(insertIdx, 0, location);\n        const insertedColors = [...this.state.anchorColors];\n        insertedColors.splice(insertIdx, 0, insertColor);\n        this.setState({anchorPoints: insertedAnchorPoints, anchorColors: insertedColors, currentFocusedPoint: insertIdx});\n        if (this.state.viewMode) {\n            this.props.onAnchorPointDidChange(insertedAnchorPoints, insertedColors);\n        }\n    }\n\n    onSliderChange(values) {\n        this.setState({anchorPoints: values});\n        if (this.state.viewMode) {\n            this.props.onAnchorPointDidChange(values, this.state.anchorColors);\n        }\n    }\n\n    onFocusedPointChange(newFocusIndex) {\n        this.setState({currentFocusedPoint: newFocusIndex});\n    }\n\n    onRemoveAnchorPoint(removeIndex) {\n        if (this.state.anchorPoints.length <= 2) {\n            return;\n        }\n        let nextFocusedPoint = this.state.currentFocusedPoint;\n        if (removeIndex <= this.state.currentFocusedPoint && this.state.currentFocusedPoint !== 0) {\n            nextFocusedPoint -= 1;\n        }\n        let nextAnchorPoints = [...this.state.anchorPoints];\n        let nextAnchorColors = JSON.parse(JSON.stringify(this.state.anchorColors));\n        nextAnchorPoints.splice(removeIndex, 1);\n        nextAnchorColors.splice(removeIndex, 1)\n        this.setState({\n            anchorPoints: nextAnchorPoints,\n            anchorColors: nextAnchorColors,\n            currentFocusedPoint: nextFocusedPoint\n        });\n        if (this.state.viewMode) {\n            this.props.onAnchorPointDidChange(nextAnchorPoints, nextAnchorColors);\n        }\n    }\n\n    onColorChange(newColor) {\n        const newColorRGB = newColor.rgb;\n        const newAnchorColors = JSON.parse(JSON.stringify(this.state.anchorColors));\n        newAnchorColors[this.state.currentFocusedPoint][0] = newColorRGB.r;\n        newAnchorColors[this.state.currentFocusedPoint][1] = newColorRGB.g;\n        newAnchorColors[this.state.currentFocusedPoint][2] = newColorRGB.b;\n        this.setState({anchorColors: newAnchorColors});\n        if (this.state.viewMode) {\n            this.props.onAnchorPointDidChange(this.state.anchorPoints, newAnchorColors);\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"ColorMapEditorDiv\">\n                <ColorMapDisplay \n                    addAnchorPoint={this.addAnchorPoint}\n                    anchorPoints={this.state.anchorPoints}\n                    anchorColors={this.state.anchorColors}    \n                />\n                <ColorMapSlider \n                    anchorPoints={this.state.anchorPoints}\n                    anchorColors={this.state.anchorColors}\n                    recentUpdateTime={this.state.recentUpdateTime}    \n                    onSliderChange={this.onSliderChange}\n                />\n                <ColorMapColorPicker\n                    anchorPoints={this.state.anchorPoints}\n                    anchorColors={this.state.anchorColors}\n                    focusedIdx={this.state.currentFocusedPoint}\n                    selectHandler={this.onFocusedPointChange}\n                    removeHandler={this.onRemoveAnchorPoint}\n                    onColorChange={this.onColorChange}\n                />\n            </div>\n        );\n    }\n\n}\n\nexport default ColorMapEditor;","import axios from \"axios\";\nconst BigNumber = require(\"big-number\");\n\nconst API_END_POINT = \"https://cs519.herokuapp.com/colormap/\";\n\nexport const GETcolormap = (name) => {\n    return axios.get(API_END_POINT + name);\n}\n\nexport const POSTcolormap = (name, anchorPoints, anchorColors) => {\n    const anchors = []\n    for (let i = 0; i < anchorPoints.length; i++) {\n        const currentAnchor = {\n            red: anchorColors[i][0],\n            green: anchorColors[i][1],\n            blue: anchorColors[i][2],\n            anchor: Math.round(anchorPoints[i] * 10) /1000\n        }\n        anchors.push(currentAnchor);\n    }\n    const requestBody = {\n        name,\n        anchors\n    }\n    return axios.post(\n        API_END_POINT,\n        requestBody,\n        {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }\n    );\n}","import React, {Component} from 'react';\nimport '../styles/HomePage.css';\nimport ColorMapEditor from './ColorMapEditor';\nimport {Link} from 'react-router-dom';\nimport Button from 'react-bootstrap/Button';\nimport Spinner from 'react-bootstrap/Spinner';\nimport {POSTcolormap} from '../scripts/APIHelper';\nimport {ToastContainer, toast} from \"react-toastify\";\n\nclass HomePage extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            colorMapName: '',\n            anchorPoints: [0, 100],\n            anchorColors: [[0, 0, 0], [255, 255, 255]],\n            waitingOnAPI: false\n        }\n        this.onAnchorPointDidChange = this.onAnchorPointDidChange.bind(this);\n        this.onTextAreaChange = this.onTextAreaChange.bind(this);\n        this.onCreateButtonClick = this.onCreateButtonClick.bind(this);\n    }\n    \n    onAnchorPointDidChange(anchorPoints, anchorColors) {\n        this.setState({ anchorPoints, anchorColors });\n    }\n\n    onTextAreaChange(event) {\n        const textAreaString = event.target.value;\n        this.setState({colorMapName: textAreaString});\n    }\n\n    onCreateButtonClick() {\n        const requestMapName = this.state.colorMapName;\n        // Only allow alphanumeric and underscore\n        const filterRegex = new RegExp('^[a-zA-Z0-9_]+$');\n        if (!filterRegex.test(requestMapName)) {\n            toast.warn(\"Only alphanumberic and underscores allowed\", {\n                position: \"top-right\",\n                autoClose: 2500,\n                hideProgressBar: true,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                progress: undefined,\n            });\n            return;\n        }\n\n        this.setState({waitingOnAPI: true});\n        POSTcolormap(requestMapName, this.state.anchorPoints, this.state.anchorColors)\n            .then(res => {\n                this.props.history.push({\n                    pathname: '/view/' + requestMapName,\n                    justCreated: true\n                });\n            })\n            .catch((err) => {\n                this.setState({waitingOnAPI: false});\n                let errMessage;\n                if (err.response !== undefined) {\n                    errMessage = err.response.data;\n                } else {\n                    errMessage = \"Network Error\"\n                }\n                toast.error(errMessage, {\n                    position: \"top-right\",\n                    autoClose: 2500,\n                    hideProgressBar: true,\n                    closeOnClick: true,\n                    pauseOnHover: true,\n                    draggable: true,\n                    progress: undefined,\n                });\n            });\n    }\n\n    componentWillMount() {\n        if (\"initAnchorPoints\" in this.props.location) {\n            this.setState(\n                {\n                    anchorPoints: this.props.location.initAnchorPoints,\n                    anchorColors: this.props.location.initAnchorColors\n                }\n            );\n        } else {\n\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"HomePageDiv\">\n                <ToastContainer style={{fontSize: \"14px\"}}/>\n                <div className=\"ViewPageToolBarDiv\">\n                    <div className=\"HomePageToolBarTextAreaDiv\">\n                        <textarea \n                            className=\"HomePageTextArea\"\n                            rows={1}\n                            maxlength=\"40\"\n                            placeholder=\"ColorMap Name\"\n                            onChange={this.onTextAreaChange}\n                        />\n                    </div>\n                    <div className=\"ViewPageToolBarForkButtonDiv\">\n                        {this.state.waitingOnAPI ? \n                            <div className=\"ViewPageToolBarSpinnerDiv\">\n                                <Spinner animation=\"border\" variant=\"success\"/>\n                            </div> :\n                            <Button \n                            variant=\"outline-success\" \n                            disabled={this.state.colorMapName === \"\"}\n                            onClick={this.onCreateButtonClick}\n                            > \n                                Create\n                            </Button>}\n                    </div>\n                </div>\n                <ColorMapEditor\n                    anchorPoints = {this.state.anchorPoints}\n                    anchorColors = {this.state.anchorColors}\n                    onAnchorPointDidChange = {this.onAnchorPointDidChange}\n                />   \n            </div>\n        );\n    }\n\n}\n\nexport default HomePage;","import React, {Component} from 'react';\nimport '../styles/ViewPage.css';\nimport ColorMapEditor from './ColorMapEditor';\nimport {GETcolormap} from '../scripts/APIHelper';\nimport {Link} from 'react-router-dom';\nimport Button from 'react-bootstrap/Button';\nimport {ToastContainer, toast} from \"react-toastify\";\nimport 'react-toastify/dist/ReactToastify.css';\n\nclass ViewPage extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            loaded: false,\n            edited: false,\n            colorMapName: '',\n            anchorPoints: [0, 100],\n            anchorColors: [[0, 0, 0], [255, 255, 255]]\n        }\n\n        this.onAnchorPointDidChange = this.onAnchorPointDidChange.bind(this);\n    }\n\n    componentDidMount() {\n        const routeList = this.props.location.pathname.split('/');\n        const colorMapName = routeList[2];\n        GETcolormap(colorMapName)\n            .then((res) => {\n                const anchors = res.data.anchors;\n                let anchorPoints = [];\n                let anchorColors = [];\n                for (let i = 0; i < anchors.length; i++) {\n                    const anchor = anchors[i];\n                    anchorPoints.push(anchor.anchor * 100);\n                    anchorColors.push([anchor.red, anchor.green, anchor.blue]);\n                }\n                this.setState({\n                    loaded: true,\n                    colorMapName,\n                    anchorPoints,\n                    anchorColors\n                }, ()=> {\n                    if (\"justCreated\" in this.props.location) {\n                        toast.success(\"🎉 ColorMap Created!\", {\n                            position: \"top-right\",\n                            autoClose: 2500,\n                            hideProgressBar: true,\n                            closeOnClick: true,\n                            pauseOnHover: true,\n                            draggable: true,\n                            progress: undefined,\n                            });    \n                    } \n                });\n            })\n            .catch((err) => {\n                console.log('error', err);\n                this.props.history.push('/');\n            });\n    }\n\n    onAnchorPointDidChange(anchorPoints, anchorColors) {\n        this.setState({\n            anchorPoints,\n            anchorColors,\n            edited: true\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <ToastContainer style={{fontSize: \"20px\"}}/>\n                {\n                    this.state.loaded ? \n                    <div className=\"ViewPageDiv\">\n                        <ToastContainer style={{fontSize: \"20px\"}}/>\n                        <div className=\"ViewPageToolBarDiv\">\n                            <div className=\"ViewPageToolBarNameDiv\">\n                                {this.state.colorMapName}\n                            </div>\n                            <div className=\"ViewPageToolBarForkButtonDiv\">\n                                <Link to={{\n                                    pathname: \"/\",\n                                    initAnchorPoints: this.state.anchorPoints,\n                                    initAnchorColors: this.state.anchorColors\n                                }}>\n                                    <Button \n                                        variant=\"outline-primary\" \n                                        disabled={!this.state.edited}> \n                                        Fork\n                                    </Button>\n                                </Link>\n                            </div>\n                        </div>\n                        <ColorMapEditor\n                        anchorPoints = {this.state.anchorPoints}\n                        anchorColors = {this.state.anchorColors}\n                        onAnchorPointDidChange = {this.onAnchorPointDidChange}\n                        />\n                    </div> : null\n                }\n            </div>\n\n        );\n    }\n\n}\n\nexport default ViewPage;","import React, {Component} from 'react';\n\nimport '../styles/NavBar.css';\n\nclass NavBar extends Component {\n    render() {\n        return (\n            <div className=\"NavBarDiv\">\n                <div className=\"NavBarTitleDiv disable-select\">\n                    ColorMaps.Dev\n                </div>\n            </div>\n        );\n    }\n\n}\n\nexport default NavBar;","import logo from './logo.svg';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {HashRouter as Router, Route, Switch} from 'react-router-dom';\nimport HomePage from './components/HomePage';\nimport ViewPage from './components/ViewPage';\nimport NavBar from './components/NavBar';\nimport 'react-toastify/dist/ReactToastify.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"App-header-inner\">\n          <NavBar/>\n          <Router basename={\"/\"}>\n            <Switch>\n              <Route path=\"/view\" component={ViewPage}/>\n              <Route path=\"/\" component={HomePage}/>\n            </Switch>\n          </Router>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}